package hlform

import com.itextpdf.text.*
import com.itextpdf.text.pdf.PdfPCell
import com.itextpdf.text.pdf.PdfPTable
import com.itextpdf.text.pdf.PdfWriter
import java.io.FileOutputStream
import java.util.*

/**
 * Description
 *
 * @author
 * @date 2018-02-02
 */
class SimplePDF {

    private val _file = "E:/simple.pdf"
    private val catFont = Font(Font.FontFamily.TIMES_ROMAN, 18f, Font.BOLD)
    private val redFont = Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.NORMAL, BaseColor.RED)
    private val subFont = Font(Font.FontFamily.TIMES_ROMAN, 16f, Font.BOLDITALIC)

    init {
        try {
            val document = Document()
            PdfWriter.getInstance(document, FileOutputStream(_file))
            document.open()
            addMetaData(document)
            addTitlePage(document)
            addContent(document)
            document.close()
        } catch (e: Exception) {

        }
    }

    private fun addMetaData(document: Document) {
        document.run {
            addTitle("Simple PDF.")
            addSubject("Using iText.")
            addAuthor("junaiu")
            addKeywords("kotlin, iText, pdf, form")
        }
    }

    private fun addTitlePage(document: Document) {
        val preface = Paragraph()
        //add one empty line
        addEmptyLine(preface, 1)
        //lets write a big header
        preface.add(Paragraph("Title of the document", catFont))

        addEmptyLine(preface, 1)
        //will create: Report generated by: _name, _date
        preface.add(Paragraph("Report generated by: ${System.getProperty("user.name")}, ${Date()}", redFont))

        addEmptyLine(preface, 3)
        preface.add(Paragraph("This document is a demo", redFont))

        addEmptyLine(preface, 8)

        preface.add(Paragraph("balabalabala...", redFont))

        document.add(preface)
        document.newPage()
    }

    private fun addContent(document: Document) {
        var anchor = Anchor("First chapter", catFont)
        anchor.name = "First Chapter"

        //second parameter is the number of the chapter
        var catPart = Chapter(Paragraph(anchor), 1)

        var subPara = Paragraph("Subcategory 1", subFont)
        var subCatPart = catPart.addSection(subPara)

        subPara = Paragraph("Subcategory 2", subFont)
        subCatPart = catPart.addSection(subPara)
        subCatPart.add(Paragraph("Paragraph 1"))
        subCatPart.add(Paragraph("Paragraph 2"))
        subCatPart.add(Paragraph("Paragraph 3"))

        //add a list
        createList(subCatPart)
        val paragraph = Paragraph()
        addEmptyLine(paragraph, 5)
        subCatPart.add(paragraph)

        //add a table
        createTable(subCatPart)
        //now add all this to document
        document.add(catPart)

        //next section
        anchor = Anchor("Second Chapter", catFont)
        anchor.name = "Second Chapter"
        //second parameter is the number of the chapter
        catPart = Chapter(Paragraph(anchor), 1)
        subCatPart = catPart.addSection(subPara)
        subCatPart.add(Paragraph("This is a very important message"))

        //now add all this to document
        document.add(catPart)
    }

    private fun createTable(subCatPart: Section) {
        val table = PdfPTable(4)

        var c1 = PdfPCell(Phrase("Table Header 1"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)

        c1 = PdfPCell(Phrase("Table Header 2"))
        c1.horizontalAlignment = Element.ALIGN_RIGHT
        table.addCell(c1)

        c1 = PdfPCell(Phrase("Table Header 3"))
        c1.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(c1)
        table.headerRows = 1

        c1 = PdfPCell(Phrase("Table Header 4"))
        c1.horizontalAlignment = Element.ALIGN_LEFT
        table.addCell(c1)

        table.addCell("1.0")
        table.addCell("1.1")
        table.addCell("1.2")
        table.addCell("2.1")
        table.addCell("2.3")
        table.addCell("2.3")

        subCatPart.add(table)
    }

    private fun createList(subCatPart: Section) {
        val list = mutableListOf<ListItem>()
        list.add(ListItem("First point"))
        list.add(ListItem("Second point"))
        list.add(ListItem("Third point"))
        subCatPart.addAll(list)
    }

    private fun addEmptyLine(paragraph: Paragraph, number: Int) {
        for (i in 0 until number) {
            paragraph.add(Paragraph(" "))
        }
    }

}